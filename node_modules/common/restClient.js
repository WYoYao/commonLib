/*根据请求进行转换*/
function requestBefore() {
    this.responseTool = require('./responseTool');
    this.path = require('path');
    this.fs = require('fs');
    this.requestTypes = { get: 'get', post: 'post', upload: 'upload', down: 'down' };
    this.request = new request();
};

requestBefore.prototype = {
    //登录
    plogin: function (req, res, next, requestType, objParam) {
        var _this = this;
        objParam.fn = pconst.requestType.plogin;
        startSendBefore.call(_this, req, requestType, objParam, null, function (err, result) {
            result = (result || [])[0] || {};
            result.err = err;
            _this.responseTool.loginResponse(req, res, result);
        });
    },
    //获取数据
    pquery: function (req, res, next, requestType, objParam) {
        var _this = this;
        startSendBefore.call(_this, req, requestType, objParam, null, function (err, result) {
            var root = _mapConfig[objParam.fn];
            if (err) {
                console.error('获取' + objParam.fn + '的数据err：' + (err.stack || JSON.stringify(err)));
                return _this.responseTool.sendServerException(res);
            }
            var clientResult = _this.tool.parseResult(result, objParam.fn);
            if (!clientResult)
                return _this.responseTool.sendServerException(res, '请检查' + pconst.mapFileName + '文件是否有' + objParam.fn + '请求的配置');
            _this.responseTool.sendSuccess(res, clientResult);
        });
    },
    //普通下载
    pfiledownload: function (req, res, next, requestType, objParam) {
        var _this = this;
        startSendBefore.call(_this, req, requestType, objParam, null, function (err, result) {
            result = result || {};
            var bufferArr = result.buffer;
            if (err || !bufferArr) {
                pLogger.error('文件下载失败：' + (err.stack || JSON.stringify(err)));
                return _this.responseTool.sendServerException(res);
            }

            var fileName = result.fileName;
            var buffer = Buffer.concat(bufferArr);
            var path = _this.path.join(_this.fileOper.uploadPath, Math.random() + '' + new Date().getTime());
            _this.fs.writeFile(path, buffer, function (err) {
                if (err) {
                    console.error("下载时文件写入 出错" + (err.stack || JSON.stringify(err)));
                    return _this.responseTool.sendServerException(res);
                }
                res.download(path, encodeURI(fileName));
            });
        });
    },
    //根据不同参数来进行附件下载
    pdownloadByParam: function (req, res, next, requestType, objParam) {
        this.pfiledownload(req, res, next, requestType, objParam);
    },
    //数据更新
    pupdate: function (req, res, next, requestType, objParam) {
        var _this = this;
        var tempParam = createParam.call(_this, req, objParam);
        var criteria = tempParam.criteria || {};
        if (criteria.pwithAttachments == true) {        //保存时先进行附件上传操作
            var fileCount = 0;
            var alreadyFileCount = 0;
            var isUploadError = false, isValidError = false;
            parseAttachment([criteria]);
            if (fileCount == alreadyFileCount) _sendStart();
        }
        else _sendStart();

        //循环解析参数，以便深层次的逐一上传文件
        function parseAttachment(dataParamArr) {
            for (var x = 0; x < dataParamArr.length; x++) {
                var currDataParam = dataParamArr[x];
                for (var proName in currDataParam) {
                    if (currDataParam.hasOwnProperty(proName) == false) continue;
                    var proValue = currDataParam[proName];
                    if (proName == pconst.attachments) {
                        var attachments = proValue instanceof Array == true ? proValue : [proValue];
                        fileCount += attachments.length;
                        for (var y = 0; y < attachments.length; y++) {
                            var currAttachment = attachments[y];
                            var oldResource = _this.path.basename(currAttachment.path);
                            var pwIndex = oldResource.indexOf('?');
                            if (pwIndex > -1)
                                oldResource = oldResource.substring(0, pwIndex);
                            currAttachment.path = oldResource;
                            if (currAttachment.isNewFile != false) {
                                var tempName = currAttachment.path;
                                var basePath = _this.path.join(_this.fileOper.uploadPath, tempName);
                                if (!_this.fs.existsSync(basePath)) {
                                    console.error('文件' + basePath + '不存在');
                                    isValidError = true;
                                    return _this.responseTool.sendServerException(res);
                                }

                                var subdirectory = currAttachment.subdirectory.indexOf('/') == 0 ?
                                                   currAttachment.subdirectory : '/' + currAttachment.subdirectory;
                                var uploadInfo = {
                                    path: basePath,
                                    fileName: currAttachment.fileName,
                                    fileSuffix: currAttachment.fileSuffix,
                                    subdirectory: subdirectory
                                };

                                (function (attachment, oldAttachment, oldDataParam) {
                                    var uploadObjParam = {
                                        data: attachment,
                                        fn: pconst.requestType.pupload
                                    };
                                    startSendBefore.call(_this, req, _this.requestTypes.upload, uploadObjParam, null, function (uploadErr, uploadResult) {
                                        if (isValidError || isUploadError) return;

                                        if (uploadErr) {
                                            pLogger.error('文件上传失败：' + (uploadErr.stack || JSON.stringify(uploadErr)));
                                            isUploadError = true;
                                            return _this.responseTool.sendServerException(res);
                                        }
                                        ++alreadyFileCount;

                                        var fileInfos = uploadResult || [];
                                        var newProName = oldAttachment.toPro;

                                        if (oldDataParam[newProName] == null) oldDataParam[newProName] = [];
                                        oldDataParam[newProName].push((fileInfos[0] || {}).id || '');

                                        if (fileCount == alreadyFileCount) _sendStart();
                                    });
                                })(uploadInfo, currAttachment, currDataParam);
                            } else {
                                ++alreadyFileCount;
                                var newProName = currAttachment.toPro;
                                if (currDataParam[newProName] == null) currDataParam[newProName] = [];
                                var ooldPath = psecret.parser(currAttachment.path);
                                currDataParam[newProName].push(ooldPath);
                            }
                        }
                        delete currDataParam[proName];
                        continue;
                    }
                    if (proValue instanceof Object == true) {
                        arguments.callee([proValue]);
                        continue;
                    }
                    if (proValue instanceof Array == true) {
                        arguments.callee(proValue);
                        continue;
                    }
                }
            }
        };

        function _sendStart() {
            delete criteria.pwithAttachments;
            var updateObjParam = {
                data: criteria,
                fn: tempParam.fn
            };
            startSendBefore.call(_this, req, _this.requestTypes.post, updateObjParam, null, function (updateErr, updateResult) {
                if (updateErr) {
                    pLogger.error(tempParam.fn + '执行失败：' + (updateErr.stack || JSON.stringify(updateErr)));
                    return _this.responseTool.sendServerException(res);
                }
                _this.responseTool.sendSuccess(res);
            });
        }
    },
    /*
    *自定义get请求，参数为object，包含属性如下：
    *   url
    *   fn 请求的接口名称
    *   criteria 请求附带的参数
    *   isUpdate   是否是更新操作，数据的新增、修改、删除均为更新，默认false
    *   isParserResult  是否解析结果(只是把content提出来)，默认true
    *   isToDataMap     是否对应datamap，对content内的数据依据dataMap进行转换  默认true
    *   isParserCriteria 是否对请求参数进行处理，默认true
    *   call       请求的回调，两个参数err,result
    */
    sendGet: function (objParam) {
        var _this = this;
        var requestType = objParam.isUpdate == true ? this.requestTypes.post : this.requestTypes.get;
        startSendBefore.call(this, {}, requestType, {
            data: objParam.criteria, fn: objParam.fn, isParserResult: objParam.isParserResult, isParserCriteria: objParam.isParserCriteria
        }, objParam.url, function (err, result) {
            if (err) {
                console.error('获取' + objParam.fn + '的数据err：' + (err.stack || JSON.stringify(err)));
                return typeof objParam.call == 'function' ? objParam.call(err) : '';
            }
            if (objParam.isToDataMap !== false)
                customSendParse.call(_this, objParam.fn, objParam.isUpdate, result, objParam.call);
            else typeof objParam.call == 'function' ? objParam.call(err, result) : '';
        });
    },
    /*自定义post请求，参数同sendGet*/
    sendPost: function (objParam) {
        var _this = this;
        startSendBefore.call(this, {}, this.requestTypes.post, {
            data: objParam.criteria, fn: objParam.fn, isParserResult: objParam.isParserResult, isParserCriteria: objParam.isParserCriteria
        }, objParam.url, function (err, result) {
            if (err) {
                console.error('获取' + objParam.fn + '的数据err：' + (err.stack || JSON.stringify(err)));
                return typeof objParam.call == 'function' ? objParam.call(err) : '';
            }
            if (objParam.isParserResult !== false)
                customSendParse.call(_this, objParam.fn, objParam.isUpdate, result, objParam.call);
            else typeof objParam.call == 'function' ? objParam.call(err, result) : '';
        });
    }
};

module.exports = new requestBefore();

function createParam(req, objParam) {
    var _this = this;
    if (_this._append == null) {
        _this.tool = require('../demoData/tool');

        this.fs = require('fs');
        _this.fileOper = require('./attachmentOper');
        _this._append = 1;
    }
    var param = objParam.data || {};
    var user = null;
    if (req.session) {
        user = req.session.puser || {};
    } else if (req.cookies) {
        var userId = req.cookies[uidCookieName];
        if (userId) {
            userId = psecret.parser(userId);
            user = { id: userId };
        }
    }
    if (user) {
        if (param instanceof Array == true) {
            for (var i = 0; i < param.length; i++) {
                param[i].puser = user;
            }
        } else param.puser = user;
    }
    return { fn: objParam.fn, criteria: param };
};

function startSendBefore(req, requestType, objParam, url, call) {
    var tempParam = createParam.call(this, req, objParam);

    var par = {
        url: url || serviceUrl,
        criteria: tempParam.criteria,
        isParserResult: objParam.isParserResult,
        isParserCriteria: objParam.isParserCriteria,
        fn: tempParam.fn,
        call: call
    };
    requestType == this.requestTypes.get ? this.request.sendGet(par) :
    requestType == this.requestTypes.upload ? this.request.upload(par) :
    requestType == this.requestTypes.down ? this.request.down(par) :
    this.request.sendPost(par);
};

function customSendParse(fn, isUpdate, result, call) {
    if (isUpdate == true) {
        return call(null, result);
    }
    var clientResult = this.tool.parseResult(result, fn);
    if (!clientResult)
        return call('请检查' + pconst.mapFileName + '文件是否有' + fn + '请求的配置');
    call(null, clientResult);
};

/*对请求进行构造*/
function request() {
    this.send = new send();
    this.javaParamPrefixName = 'jsonString';
    this.middleParamPrefixName = 'pjsonParams';
    this.fs = require('fs');
};

/*
*普通post请求
*参数objParam    object类型，包括属性如下：
*   url
*   criteria(非必须) object或array类型
*   isParserResult  是否解析结果，默认true
*   isParserCriteria 是否重新构造条件
*   call(非必须)  function类型
*   fn 请求的方法名称，必须
*示例sendPost({
    criteria:{name:'111'},call:function(err,result){},fn:'getUser'
})
*/
request.prototype.sendPost = function (objParam) {
    var requestParam = objParam.isParserCriteria === false ? objParam.criteria : this.constructorParam(objParam.criteria);
    var url = objParam.url;
    url = (url.lastIndexOf('/') == url.length - 1 ? url : url + '/') + objParam.fn;

    this.send.sendPost({
        isParserResult: objParam.isParserResult,
        criteria: requestParam,
        call: objParam.call,
        url: url
    });
};


/*get请求  参数释义同sendPost*/
request.prototype.sendGet = function (objParam, fnName) {
    var url = objParam.url;
    url = !objParam.fn ? url : (url.lastIndexOf('/') == url.length - 1 ? url : url + '/') + objParam.fn;
    if (objParam.isParserCriteria !== false) {
        if (objParam.criteria) {
            var criteriaStr = this.constructorCriteriaStr(objParam.criteria);
            url += '?' + this.javaParamPrefixName + '=' + criteriaStr;
        }
    } else {
        url += '?';
        var cri = objParam.criteria || {};
        var urlParams = [];
        for (var cr in cri) {
            if (cri.hasOwnProperty(cr) == false) continue;
            urlParams.push(cr + '=' + cri[cr]);
        }
        url += urlParams.join('&');
    }

    fnName = fnName || 'sendGet';
    this.send[fnName]({
        isParserResult: objParam.isParserResult,
        call: objParam.call,
        url: url
    });
};

/*上传*/
request.prototype.upload = function (objParam) {
    var criteria = objParam.criteria || {};

    var fileParamName = 'file';
    var realCriteria = [{
        subdirectory: criteria.subdirectory,
        fileName: criteria.fileName,
        fileSuffix: criteria.fileSuffix
    }];


    var requestParam = this.constructorParam(realCriteria);
    requestParam[fileParamName] = [this.fs.createReadStream(criteria.path)];

    var url = fileServiceUrl;
    this.send.upload({
        criteria: requestParam,
        call: objParam.call,
        url: url
    });
};

/*下载*/
request.prototype.down = function (objParam) {
    var url = downFileServiceUrl + objParam.criteria.id;
    objParam.url = url;
    this.send.down(objParam);
};



/*对请求参数进行处理*/
request.prototype.constructorParam = function (criteria) {
    var obj = {};
    var criteriaStr = this.constructorCriteriaStr(criteria);
    obj[this.javaParamPrefixName] = criteriaStr;
    return obj;
};

request.prototype.constructorCriteriaStr = function (criteria) {
    var cri = criteria || {};
    //var cri = criteria instanceof Array == true ? criteria : [criteria];
    return encodeURIComponent(JSON.stringify(cri));
};





/*----------------------------发送请求并解析返回----------------------------*/
function send() {
    this.request = require('../public_nodejs/request');
    this.http = require('http');
};

/*
*普通post请求
*参数objParam    object类型，包括属性如下：
*   isParserResult   是否解析结果
*   criteria(非必须) object类型
*   call(非必须)  function类型
*   url 请求地址
*示例sendPost({
    criteria:{name:'111'},call:function(err,result){},fn:'getUser'
})
*/
send.prototype.sendPost = function (objParam) {
    var _this = this;
    _this.request.post({
        url: objParam.url,
        form: objParam.criteria
    }, function (err, httpResponse, body) {
        var obj = _this.parseResponse(err, body, httpResponse, objParam.isParserResult);
        if (typeof objParam.call === 'function')
            objParam.call(obj.err, obj.data);
    });
};


/*get请求  参数释义同sendPost*/
send.prototype.sendGet = function (objParam) {
    var _this = this;
    _this.request.get({
        url: objParam.url
    }, function (err, httpResponse, body) {
        var obj = _this.parseResponse(err, body, httpResponse, objParam.isParserResult);
        if (typeof objParam.call === 'function')
            objParam.call(obj.err, obj.data);
    });
};

/*上传 formData里的file为数组，数组内多个文件流时即批量上传 */
send.prototype.upload = function (objParam) {
    var _this = this;
    var req = _this.request.post({
        url: objParam.url, formData: objParam.criteria
    }, function (err, httpResponse, body) {
        var obj = err ? { err: err } : _this.parseResponse(err, body, httpResponse);
        if (typeof objParam.call == 'function') objParam.call(obj.err, obj.data);
    });
};

/*下载*/
send.prototype.down = function (objParam) {
    var bufArr = [];
    var isErr = false;
    var res;
    var req = this.request.get({
        url: objParam.url
    });
    req.on('error', function (e) {
        isErr = true;
        objParam.call('下载出错: ' + e.message);
    }).on('response', function (response) {
        res = response;
        if (res.statusCode !== 200 && res.statusCode !== 201) {
            isErr = true;
            return objParam.call('下载时连接错误，状态码：' + res.statusCode);
        }
    }).on('data', function (data) {
        bufArr.push(data);
    }).on('end', function () {
        if (isErr) return;

        var fileName = '';
        var dispositionArr = (res.headers['content-disposition'] || '').split(';');
        for (var i = 0; i < dispositionArr.length; i++) {
            var currDis = dispositionArr[i];
            if (currDis.indexOf('filename') > -1) {
                fileName = currDis;
                break;
            }
        }

        fileName = fileName.split('=')[1] || '';
        fileName = decodeURI(fileName);
        fileName = fileName.replace(/\"/g, '') || '_temp';
        objParam.call(null, { fileName: fileName, buffer: bufArr });
    });
    req.end();
};

send.prototype.parseResponse = function (responseErr, responseTxt, _httpInfo, isParse) {
    if (responseErr) return { err: responseErr };
    if (_httpInfo.statusCode != 200) return { err: responseTxt || '后台返回异常' };
    isParse = isParse === false ? false : true;
    if (!isParse) return { data: responseTxt };
    var responseObj = {};
    try {
        responseObj = (typeof responseTxt == 'object' ? responseTxt : JSON.parse(responseTxt)) || {};
    } catch (e) {
        responseObj = {};
    } finally {
        var err = null, data = null;
        var errStr = null;
        if (responseObj.result !== 'success') errStr = responseObj.reason || responseObj.result || '后台返回异常';
        return { err: errStr, data: responseObj.content };
    }
};
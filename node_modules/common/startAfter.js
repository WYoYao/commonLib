function startAfterExecute(config, cpCode, connectedCall) {
    var zookEeper = require('../public_nodejs/node-zookeeper-client');
    var client = zookEeper.createClient(config.zookeeperIp);
    var serviceNode = '/EMS/Service/Background';
    var pcloudNode = '/EMS/Service/Foreground';
    client.once('connected', function () {
        client.getData(serviceNode, function (err, data, stat) {
            if (err) throw '获取' + serviceNode + '服务地址错误，请检查后台配置：' + JSON.stringify(err);
            var objService = JSON.parse(data.toString()) || {};
            var currService = objService[cpCode];
            if (!currService) throw '未从zookeeper中获取到产品线' + cpCode + '的服务地址';

            global.serviceUrl = 'http://' + currService.domain + '/' + currService.context
                + '/Spring/MVC/entrance/unifier/';
            global.fileServiceUrl = 'http://' + currService.domain + '/' + currService.context +
                '/Spring/MVC/entrance/upload';
            global.downFileServiceUrl = 'http://' + currService.domain + '/' + currService.context +
                '/Spring/MVC/entrance/download?resource=';
            global.loginPath = 'login';
            global.commonLibUrl = config.commonLibUrl;

            client.getData(pcloudNode, function (err2, data2, stat2) {
                if (err2) throw '从节点' + pcloudNode + '获取尚格云地址错误，请检查后台配置：' + JSON.stringify(err2);
                var urlObj = JSON.parse(data2.toString()) || {};
                var purl = (urlObj['PersagyCloud'] || {}).Url;
                purl = purl.lastIndexOf('/') !== purl.length - 1 && purl.length > 0 ? purl + '/' : purl;
                global.pcloudUrl = purl;
                if (!global.pcloudUrl) throw '从节点' + pcloudNode + '未获取到尚格云地址';
                client.close();

                if (typeof connectedCall == 'function') connectedCall();
            });
        });
    });
    client.connect();
};

module.exports = startAfterExecute;
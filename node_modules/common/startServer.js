var startServer = function () {
    // 获取的express 对象
    this.express = require('../public_nodejs/express');
    // 获取常用的API
    this.http = require('http');
    this.path = require('path');
    this.fs = require('fs');

    this.log4 = require('./log4logger');
    
    this.fileOper = require('common/attachmentOper');

    require('../../pweb_commonLib/public/scripts/extend/Array');
    require('../../pweb_commonLib/public/scripts/extend/Date');
    require('../../pweb_commonLib/public/scripts/extend/Math');
    require('../../pweb_commonLib/public/scripts/extend/Number');
    require('../../pweb_commonLib/public/scripts/extend/String');

    this.pconst = require('../../pweb_commonLib/public/scripts/tool/pconst');
    this.psecret = require('../../pweb_commonLib/public/scripts/tool/psecret');
    this.ptool = require('../../pweb_commonLib/public/scripts/tool/ptool');
};

/*
 *服务端启动的方法
 *参数类型为object 提供的属性有：
 *port(非必须)  端口号，不传时从项目对应的config文件中获取
 *routes(必须) 当前项目的控制器(路由)
 *dirname(必须) 当前项目根目录所在的绝对位置
 *isSession(默认false) 是否启用session
 *isLogin(默认false)  是否需要登录
 *startedCall  启动后的回调，非必须，无参数
 *code 非必须，产品线编码
 *isZookeeper 默认true
 */
startServer.prototype.Start = function () {
    var arguObj = arguments[0];

    var isZookeeper = arguObj.isZookeeper === false ? false : true;
    var port = arguObj.port;
    var routes = arguObj.routes;
    var dirname = arguObj.dirname;
    var isSession = arguObj.isSession || false;
    var isLogin = arguObj.isLogin || false;
    isSession = isLogin == true ? true : isSession;

    global.baseDirname = dirname;
    dirname = dirname.replace(/\\/g, '/');
    var uploadPath = this.path.resolve(dirname, './' + this.fileOper.staticDirName + '/' + this.fileOper.tempDirName).replace(/\\/g, '/');
    this.fileOper.uploadPath = uploadPath;
    var staticPath = this.path.resolve(uploadPath, '../');

    var configInfo = require('./getConfig') || {};
    port = port || configInfo.port;

    global.pconst = this.pconst;
    global.psecret = this.psecret;
    global.ptool = this.ptool;
    global.commonLibUrl = configInfo.commonLibUrl;
    global.uploadPath = uploadPath;
    global.uidCookieName = 'uid';

    var mapFilePath = this.path.join(baseDirname, pconst.mapFileName);
    if (this.fs.existsSync(mapFilePath + '.js')) global._mapConfig = require(mapFilePath) || {};

    var app = this.express();
    app.set('port', port);
    app.set('views', dirname + '/' + this.fileOper.viewDirName);
    app.engine('.html', require('../public_nodejs/ejs').__express);
    app.set('view engine', 'html');

    //log4js日志
    this.log4.CreateLog(app, dirname);

    app.use(this.express.bodyParser({ uploadDir: uploadPath }));
    app.use(this.express.methodOverride());
    app.use(this.express.cookieParser());

    //以redis存储session 保证session的健壮性 默认过期时间为一天或用户主动退出
    if (isSession === true) {
        var sessionM = require("../public_nodejs/express-session");
        app.use(sessionM({
            secret: port.toString(),
            cookie: {
                httpOnly: true,
                maxAge: 1000 * 60 * 60 * 24
            }
        }));
    }

    app.use(app.router);
    if (routes) {
        if (routes instanceof Array) {//具有多个路由文件,以数组的形式传入
            for (var i = 0; i < routes.length; i++) {
                routes[i](app);
            }
        } else {//只有一个路由文件
            routes(app);
        }
    }

    if (configInfo.isRealData != null)
        require('./publicRouter')(app, isLogin);

    app.use(this.express.static(staticPath));

    var ser = this.http.createServer(app);
    ser.timeout = 300000;

    ser.listen(app.get('port'), function () {
        console.log('Express server listening on port ' + app.get('port'));
        if (isZookeeper)
            require('./startAfter')(configInfo, arguObj.code, arguObj.startedCall);
        else {
            if (typeof arguObj.startedCall == 'function') arguObj.startedCall();
        }
    });

    this.fileOper.existsDir();
    this.fileOper.clearFile();

    if (configInfo.isInitBase == true) {
        var dataBase = require('../demoData/dataBase');
        dataBase.init();
    }
};

module.exports = new startServer();